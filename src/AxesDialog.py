# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Tue Apr 29 11:18:44 2014

import wx
import matplotlib.font_manager


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

font_styles = ['normal', 'italic', 'oblique']
font_weights = ['normal', 'bold', 'heavy', 'light', 'ultrabold', 'ultralight']
font_names = [f.name for f in matplotlib.font_manager.fontManager.ttflist]

class AxesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AxesDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=wx.NB_LEFT)
        self.paneSize_n_Position = wx.Panel(self.notebook_1, -1)
        self.label_7_copy = wx.StaticText(self.paneSize_n_Position, -1, "Move")
        self.label_12 = wx.StaticText(self.paneSize_n_Position, -1, "Left")
        self.tcLeft = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.label_13 = wx.StaticText(self.paneSize_n_Position, -1, "Top")
        self.tcTop = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.label_11 = wx.StaticText(self.paneSize_n_Position, -1, "Resize")
        self.label_14 = wx.StaticText(self.paneSize_n_Position, -1, "Width")
        self.tcWidth = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.tcWidth_cm = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.label_15 = wx.StaticText(self.paneSize_n_Position, -1, "Height")
        self.tcHeight = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.tcHeight_cm = wx.TextCtrl(self.paneSize_n_Position, -1, "")
        self.paneScale_n_Ticks = wx.Panel(self.notebook_1, -1)
        self.label_1_copy = wx.StaticText(self.paneScale_n_Ticks, -1, "Selection")
        self.lbScaleTicksAxes = wx.ListBox(self.paneScale_n_Ticks, -1, choices=["Horizontal", "Vertical"], style=wx.LB_SINGLE)
        self.label_8 = wx.StaticText(self.paneScale_n_Ticks, -1, "From")
        self.tcFrom = wx.TextCtrl(self.paneScale_n_Ticks, -1, "")
        self.label_9 = wx.StaticText(self.paneScale_n_Ticks, -1, "To")
        self.tcTo = wx.TextCtrl(self.paneScale_n_Ticks, -1, "")
        self.rbTicksIncrement = wx.RadioButton(self.paneScale_n_Ticks, -1, "")
        self.lbTicksIncrement = wx.StaticText(self.paneScale_n_Ticks, -1, "Increment", style=wx.ALIGN_RIGHT)
        self.tcTicksIncrement = wx.TextCtrl(self.paneScale_n_Ticks, -1, "")
        self.rbTicksNumber = wx.RadioButton(self.paneScale_n_Ticks, -1, "")
        self.lbMajorTicksNb = wx.StaticText(self.paneScale_n_Ticks, -1, "Major ticks", style=wx.ALIGN_RIGHT)
        self.tcMajorTicksNb = wx.TextCtrl(self.paneScale_n_Ticks, -1, "")
        self.lbMinorTicksNb = wx.StaticText(self.paneScale_n_Ticks, -1, "Minor ticks", style=wx.ALIGN_RIGHT)
        self.tcMinorTicksNb = wx.TextCtrl(self.paneScale_n_Ticks, -1, "")
        self.paneTitle_n_Format = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_16 = wx.StaticText(self.paneTitle_n_Format, -1, "Selection")
        self.lbTitleFormatAxes = wx.ListBox(self.paneTitle_n_Format, -1, choices=["Horizontal", "Vertical"], style=wx.LB_SINGLE)
        self.cbShowLabels = wx.CheckBox(self.paneTitle_n_Format, -1, "Show labels")
        self.lbTitle = wx.StaticText(self.paneTitle_n_Format, -1, "Title")
        self.tcTitle = wx.TextCtrl(self.paneTitle_n_Format, -1, "")
        self.label_22 = wx.StaticText(self.paneTitle_n_Format, -1, "Font")
        self.label_23 = wx.StaticText(self.paneTitle_n_Format, -1, "Name")
        self.cbTitleFontName = wx.ComboBox(self.paneTitle_n_Format, -1, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.label_24 = wx.StaticText(self.paneTitle_n_Format, -1, "Size")
        self.spTitleFontSize = wx.SpinCtrl(self.paneTitle_n_Format, -1, "", min=0, max=500)
        self.label_25 = wx.StaticText(self.paneTitle_n_Format, -1, "Style")
        self.cbTitleFontStyle = wx.ComboBox(self.paneTitle_n_Format, -1, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.label_26 = wx.StaticText(self.paneTitle_n_Format, -1, "Weight")
        self.cbTitleFontWeight = wx.ComboBox(self.paneTitle_n_Format, -1, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.panePalette_n_Style = wx.Panel(self.notebook_1, -1)
        self.label_6 = wx.StaticText(self.panePalette_n_Style, -1, "Gridder")
        self.label_17 = wx.StaticText(self.panePalette_n_Style, -1, "X sampling")
        self.spXSamp = wx.SpinCtrl(self.panePalette_n_Style, -1, "25", min=0, max=200)
        self.label_18 = wx.StaticText(self.panePalette_n_Style, -1, "Y sampling")
        self.spYSamp = wx.SpinCtrl(self.panePalette_n_Style, -1, "25", min=0, max=200)
        self.label_19 = wx.StaticText(self.panePalette_n_Style, -1, "Data range")
        self.label_20 = wx.StaticText(self.panePalette_n_Style, -1, "Min")
        self.tcDataMin = wx.TextCtrl(self.panePalette_n_Style, -1, "")
        self.label_21 = wx.StaticText(self.panePalette_n_Style, -1, "Max")
        self.tcDataMax = wx.TextCtrl(self.panePalette_n_Style, -1, "")
        self.bCancel_copy = wx.Button(self, wx.ID_CANCEL, "Cancel")
        self.bApply_copy = wx.Button(self, wx.ID_APPLY, "Apply")
        self.bOK_copy = wx.Button(self, wx.ID_OK, "OK")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.onScaleTicksAxesSelect, self.lbScaleTicksAxes)
        self.Bind(wx.EVT_RADIOBUTTON, self.onIncrementTicksSelect, self.rbTicksIncrement)
        self.Bind(wx.EVT_RADIOBUTTON, self.onNbMajorTicksSelect, self.rbTicksNumber)
        self.Bind(wx.EVT_LISTBOX, self.onTitleFormatAxesSelect, self.lbTitleFormatAxes)
        self.Bind(wx.EVT_CHECKBOX, self.onLabelCheck, self.cbShowLabels)
        self.Bind(wx.EVT_BUTTON, self.onApply, id=wx.ID_APPLY)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AxesDialog.__set_properties
        self.SetTitle("Axes settings")
        self.SetSize((970, 260))
        self.label_12.SetMinSize((55, 19))
        self.label_13.SetMinSize((55, 19))
        self.label_14.SetMinSize((55, 19))
        self.tcWidth_cm.Enable(False)
        self.label_15.SetMinSize((55, 19))
        self.tcHeight_cm.Enable(False)
        self.lbScaleTicksAxes.SetSelection(0)
        self.label_8.SetMinSize((50, 19))
        self.label_9.SetMinSize((50, 19))
        self.rbTicksIncrement.SetMinSize((20, 21))
        self.lbTicksIncrement.SetMinSize((130, 19))
        self.rbTicksNumber.SetMinSize((20, 21))
        self.lbMajorTicksNb.SetMinSize((130, 19))
        self.lbMajorTicksNb.Enable(False)
        self.tcMajorTicksNb.Enable(False)
        self.lbMinorTicksNb.SetMinSize((130, 19))
        self.lbTitleFormatAxes.SetSelection(0)
        self.cbShowLabels.SetValue(1)
        self.label_22.SetMinSize((44, 19))
        self.cbTitleFontStyle.SetMinSize((80, 29))
        self.cbTitleFontWeight.SetMinSize((80, 29))
        self.label_6.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.bOK_copy.SetFocus()
        # end wxGlade
        
        #populate font names combobox
        for name in font_names:
            self.cbTitleFontName.Append(name)
        #populate font style combobox
        for style in font_styles:
            self.cbTitleFontStyle.Append(style)
        #populate font weight combobox
        for weight in font_weights:
            self.cbTitleFontWeight.Append(weight)


    def __do_layout(self):
        # begin wxGlade: AxesDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43 = wx.BoxSizer(wx.VERTICAL)
        sizer_42 = wx.BoxSizer(wx.VERTICAL)
        sizer_41 = wx.BoxSizer(wx.VERTICAL)
        sizer_40 = wx.BoxSizer(wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_17_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12.Add(self.label_7_copy, 0, wx.LEFT, 5)
        sizer_23.Add(self.label_12, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_23.Add(self.tcLeft, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_14_copy.Add(sizer_23, 0, wx.LEFT | wx.TOP | wx.EXPAND, 10)
        sizer_24.Add(self.label_13, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_24.Add(self.tcTop, 0, wx.LEFT, 5)
        sizer_14_copy.Add(sizer_24, 0, wx.LEFT | wx.EXPAND, 10)
        sizer_12.Add(sizer_14_copy, 0, wx.EXPAND, 0)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_13.Add(self.label_11, 0, wx.LEFT, 5)
        sizer_25.Add(self.label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_25.Add(self.tcWidth, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_25.Add(self.tcWidth_cm, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_22.Add(sizer_25, 0, wx.LEFT | wx.TOP | wx.EXPAND, 10)
        sizer_26.Add(self.label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_26.Add(self.tcHeight, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_26.Add(self.tcHeight_cm, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_22.Add(sizer_26, 0, wx.LEFT | wx.EXPAND, 10)
        sizer_13.Add(sizer_22, 0, wx.EXPAND, 0)
        sizer_11.Add(sizer_13, 1, wx.EXPAND, 0)
        self.paneSize_n_Position.SetSizer(sizer_11)
        sizer_4_copy.Add(self.label_1_copy, 0, wx.EXPAND | wx.ALIGN_BOTTOM, 0)
        sizer_4_copy.Add(self.lbScaleTicksAxes, 0, wx.EXPAND | wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3_copy.Add(sizer_4_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16_copy.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16_copy.Add(self.tcFrom, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15_copy.Add(sizer_16_copy, 0, wx.EXPAND, 0)
        sizer_17_copy.Add(self.label_9, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17_copy.Add(self.tcTo, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15_copy.Add(sizer_17_copy, 0, wx.EXPAND, 0)
        sizer_3_copy.Add(sizer_15_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add(self.rbTicksIncrement, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add(self.lbTicksIncrement, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add(self.tcTicksIncrement, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add(sizer_19, 0, wx.EXPAND, 0)
        sizer_20.Add(self.rbTicksNumber, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.lbMajorTicksNb, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.tcMajorTicksNb, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add(sizer_20, 0, wx.TOP | wx.EXPAND, 10)
        sizer_21.Add((20, 21), 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_21.Add(self.lbMinorTicksNb, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_21.Add(self.tcMinorTicksNb, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add(sizer_21, 0, wx.EXPAND, 0)
        sizer_3_copy.Add(sizer_18, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.paneScale_n_Ticks.SetSizer(sizer_3_copy)
        sizer_30.Add(self.label_16, 0, 0, 0)
        sizer_30.Add(self.lbTitleFormatAxes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_27.Add(sizer_30, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_28.Add(self.cbShowLabels, 0, 0, 0)
        sizer_29.Add(self.lbTitle, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(self.tcTitle, 1, wx.LEFT | wx.EXPAND, 10)
        sizer_28.Add(sizer_29, 0, wx.EXPAND, 0)
        sizer_38.Add((44, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_38.Add(self.label_22, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_40.Add(self.label_23, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_40.Add(self.cbTitleFontName, 0, 0, 0)
        sizer_39.Add(sizer_40, 0, wx.EXPAND, 0)
        sizer_41.Add(self.label_24, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_41.Add(self.spTitleFontSize, 0, 0, 0)
        sizer_39.Add(sizer_41, 0, wx.EXPAND, 0)
        sizer_42.Add(self.label_25, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_42.Add(self.cbTitleFontStyle, 0, 0, 0)
        sizer_39.Add(sizer_42, 0, wx.EXPAND, 0)
        sizer_43.Add(self.label_26, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_43.Add(self.cbTitleFontWeight, 0, 0, 0)
        sizer_39.Add(sizer_43, 1, wx.EXPAND, 0)
        sizer_38.Add(sizer_39, 0, wx.EXPAND, 0)
        sizer_28.Add(sizer_38, 0, wx.EXPAND, 0)
        sizer_27.Add(sizer_28, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.paneTitle_n_Format.SetSizer(sizer_27)
        sizer_31.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_33.Add(self.label_17, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_33.Add(self.spXSamp, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32.Add(sizer_33, 0, wx.LEFT, 5)
        sizer_34.Add(self.label_18, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_34.Add(self.spYSamp, 0, 0, 0)
        sizer_32.Add(sizer_34, 0, wx.LEFT, 5)
        sizer_31.Add(sizer_32, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add(sizer_31, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17.Add(self.label_19, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_36.Add(self.label_20, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_36.Add(self.tcDataMin, 0, 0, 0)
        sizer_35.Add(sizer_36, 0, wx.EXPAND, 0)
        sizer_37.Add(self.label_21, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_37.Add(self.tcDataMax, 0, 0, 0)
        sizer_35.Add(sizer_37, 0, wx.EXPAND, 0)
        sizer_17.Add(sizer_35, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add(sizer_17, 1, wx.EXPAND, 0)
        self.panePalette_n_Style.SetSizer(sizer_16)
        self.notebook_1.AddPage(self.paneSize_n_Position, "Size/Position")
        self.notebook_1.AddPage(self.paneScale_n_Ticks, "Scale/Ticks")
        self.notebook_1.AddPage(self.paneTitle_n_Format, "Title/Format")
        self.notebook_1.AddPage(self.panePalette_n_Style, "Palette/Style")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        sizer_2.Add((300, 20), 0, 0, 0)
        sizer_2.Add(self.bCancel_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_2.Add(self.bApply_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_2.Add(self.bOK_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    
    def initialize(self, figure, axes):
        self.axes = axes
        self.figure = figure
        
        if self.lbScaleTicksAxes.GetSelection() == 0:#if horizontal axis selected
            #initialize x-axis limits
            [xmin, xmax] = self.axes.get_xlim()
            self.tcFrom.SetValue("%.3f" % xmin)
            self.tcTo.SetValue("%.3f" % xmax)
            
            #display x ticks
            nbMajTicks = len(self.axes.get_xmajorticklabels())
            nbMinTicks = len(self.axes.get_xminorticklabels())
            self.tcMajorTicksNb.SetValue("%d" % nbMajTicks)
            self.tcMinorTicksNb.SetValue("%d" % nbMinTicks)
        elif self.lbScaleTicksAxes.GetSelection() == 1:#if horizontal axis selected:
            #initialize y-axis limits
            [ymin, ymax] = self.axes.get_ylim()
            self.tcFrom.SetValue("%.3f" % ymin)
            self.tcTo.SetValue("%.3f" % ymax)
            
            #display y ticks
            nbMajTicks = len(self.axes.get_ymajorticklabels())
            nbMinTicks = len(self.axes.get_yminorticklabels())
            self.tcMajorTicksNb.SetValue("%d" % nbMajTicks)
            self.tcMinorTicksNb.SetValue("%d" % nbMinTicks)
        
        if self.lbTitleFormatAxes.GetSelection() == 0:
            #display x axis lable
            label = self.axes.get_xaxis().get_label()
            self.tcTitle.SetValue(label.get_text())
            self.cbTitleFontName.SetValue(label.get_name())
            self.spTitleFontSize.SetValue(label.get_size())
            self.cbTitleFontStyle.SetValue(label.get_style())
            self.cbTitleFontWeight.SetValue(label.get_weight())
            
        elif self.lbTitleFormatAxes.GetSelection() == 1:
            #display x axis lable
            label = self.axes.get_yaxis().get_label()
            self.tcTitle.SetValue(label.get_text())
            self.cbTitleFontName.SetValue(label.get_name())
            self.spTitleFontSize.SetValue(label.get_size())
            self.cbTitleFontStyle.SetValue(label.get_style())
            self.cbTitleFontWeight.SetValue(label.get_weight())

        #get axes position and size
        bbox = self.axes.get_position()
        x0, y0, width, height = bbox.bounds
        #initilize axes position
        self.tcLeft.SetValue("%.3f" % x0)
        self.tcTop.SetValue("%.3f" % y0)
        #initialize axes size
        self.tcWidth.SetValue("%.3f" % width)
        self.tcHeight.SetValue("%.3f" % height)
        #get axes size in inches
        bbox = self.axes.get_window_extent().transformed(self.figure.dpi_scale_trans.inverted())
        width, height = bbox.width, bbox.height
        #initialize axes sizes in inches
        self.tcWidth_cm.SetValue("%.3f" % width)
        self.tcHeight_cm.SetValue("%.3f" % height)
        
        #data limits
        cmin, cmax = self.axes.cs.get_clim()
        self.tcDataMin.SetValue("%.4f" % cmin)
        self.tcDataMax.SetValue("%.4f" % cmax)
        
        #gridder samplings
        self.spXSamp.SetValue(self.axes.gridder.nx)
        self.spYSamp.SetValue(self.axes.gridder.ny)
                
    def onScaleTicksAxesSelect(self, event):  # wxGlade: AxesDialog.<event_handler>
        if self.lbScaleTicksAxes.GetSelection() == 0: #horizontal axis
            [xmin, xmax] = self.axes.get_xlim()
            self.tcFrom.SetValue("%.3f" % xmin)
            self.tcTo.SetValue("%.3f" % xmax)
        elif self.lbScaleTicksAxes.GetSelection() == 1: #vertical axis
            [ymin, ymax] = self.axes.get_ylim()
            self.tcFrom.SetValue("%.3f" % ymin)
            self.tcTo.SetValue("%.3f" % ymax)
    
    def onIncrementTicksSelect(self, event):  # wxGlade: AxesDialog.<event_handler>
        #enable ticks increment
        self.lbTicksIncrement.Enable(True)
        self.tcTicksIncrement.Enable(True)
        #if ticks increment selected, nb of ticks should be disabled
        self.lbMajorTicksNb.Enable(False)
        self.tcMajorTicksNb.Enable(False)
        
    
    def onNbMajorTicksSelect(self, event):  # wxGlade: AxesDialog.<event_handler>
        #enable number of ticks
        self.lbMajorTicksNb.Enable(True)
        self.tcMajorTicksNb.Enable(True)
        #if ticks number of increment selected, ticks increment should be disabled
        self.lbTicksIncrement.Enable(False)
        self.tcTicksIncrement.Enable(False)
    
    def onTitleFormatAxesSelect(self, event):  # wxGlade: AxesDialog.<event_handler>
        if self.lbTitleFormatAxes.GetSelection() == 0: #horizontal axis
            label = self.axes.get_xaxis().get_label()
            self.tcTitle.SetValue(label.get_text())
            self.cbTitleFontName.SetValue(label.get_name())
            self.spTitleFontSize.SetValue(label.get_size())
            self.cbTitleFontStyle.SetValue(label.get_style())
            self.cbTitleFontWeight.SetValue(label.get_weight())
        elif self.lbTitleFormatAxes.GetSelection() == 1: #vertical axis
            label = self.axes.get_yaxis().get_label()
            self.tcTitle.SetValue(label.get_text())
            self.cbTitleFontName.SetValue(label.get_name())
            self.spTitleFontSize.SetValue(label.get_size())
            self.cbTitleFontStyle.SetValue(label.get_style())
            self.cbTitleFontWeight.SetValue(label.get_weight())
    
    def onApply(self, event):  # wxGlade: AxesDialog.<event_handler>
        if self.lbTitleFormatAxes.GetSelection() == 0: #horizontal axis
            label = self.axes.get_xaxis().get_label()
            label.set_text(self.tcTitle.GetValue())
            label.set_name(self.cbTitleFontName.GetValue())
            label.set_size(self.spTitleFontSize.GetValue())
            label.set_style(self.cbTitleFontStyle.GetValue())
            label.set_weight(self.cbTitleFontWeight.GetValue())
        elif self.lbTitleFormatAxes.GetSelection() == 1: #vertical axis
            label = self.axes.get_yaxis().get_label()
            label.set_text(self.tcTitle.GetValue())
            label.set_name(self.cbTitleFontName.GetValue())
            label.set_size(self.spTitleFontSize.GetValue())
            label.set_style(self.cbTitleFontStyle.GetValue())
            label.set_weight(self.cbTitleFontWeight.GetValue())
       
        if self.lbScaleTicksAxes.GetSelection() == 0: #horizontal axis
            xmin = float(self.tcFrom.GetValue())
            xmax = float(self.tcTo.GetValue())
            self.axes.set_xlim(xmin, xmax)
        elif self.lbScaleTicksAxes.GetSelection() == 1: #vertical axis
            ymin = float(self.tcFrom.GetValue())
            ymax = float(self.tcTo.GetValue())
            self.axes.set_ylim(ymin, ymax)
            
        #axes position
        x0 = float(self.tcLeft.GetValue())
        y0 = float(self.tcTop.GetValue())
        #axes size
        width = float(self.tcWidth.GetValue())
        height = float(self.tcHeight.GetValue())
        #update axes
        self.axes.set_position([x0, y0, width, height])
        
        #data limits
        cmin = float(self.tcDataMin.GetValue())
        cmax = float(self.tcDataMax.GetValue())
        self.axes.set_data_limits(cmin, cmax)
        
        #gridder resolution
        nx = int(self.spXSamp.GetValue())
        ny = int(self.spYSamp.GetValue())
        self.axes.set_gridder_resolution(nx, ny)
            
        self.initialize(self.figure, self.axes)
        
        #update figure
        self.figure.canvas.draw()

    def onLabelCheck(self, event):  # wxGlade: AxesDialog.<event_handler>
        if event.IsChecked():            
            if self.lbTitleFormatAxes.GetSelection() == 0:
                #hide x axis
                self.axes.tick_params(axis='x', reset = True) # reset labels

            elif self.lbTitleFormatAxes.GetSelection() == 1:
                #hide y axis lable
                self.axes.tick_params(axis='y', reset = True) # reset labels
        else:
            if self.lbTitleFormatAxes.GetSelection() == 0:
                #hide x axis label and title
                self.axes.tick_params(\
                    axis='x',          # changes apply to the x-axis
                    labelbottom='off') # labels along the bottom edge are off
            elif self.lbTitleFormatAxes.GetSelection() == 1:
                #hide y axis lable title
                self.axes.tick_params(\
                    axis='y',          # changes apply to the x-axis
                    labelleft='off') # labels along the left edge are off
        self.figure.canvas.draw()

# end of class AxesDialog
